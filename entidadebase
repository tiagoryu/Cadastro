namespace  DIO . Series
{
     classe abstrata  pública EntidadeBase 
    {
        public  int  Id { get ; conjunto protegido  ; }
    }
} 
using  System ;

namespace  DIO . Series
{
    public  class  Serie : EntidadeBase
    {
        // Atributos
		privado  Genero  Genero { get ; definir ; }
		 string  privada Titulo { get ; definir ; }
		 string  privada Descricao { get ; definir ; }
		private  int  Ano { get ; definir ; }
         bool  privado Excluido { get ; definir ; }

        // Métodos
		public  Serie ( int  id , Genero  genero , string  titulo , string  descricao , int  ano )
		{
			isso . Id  =  id ;
			isso . Genero  =  genero ;
			isso . Titulo  =  titulo ;
			isso . Descricao  =  descricao ;
			isso . Ano  =  ano ;
            isso . Excluido  =  falso ;
		}

         string de substituição  pública ToString () 
		{
            string  retorno  =  " " ;

			retorno  + =  " Gênero: "  +  isso . Genero  +  Environment . NewLine ;
            retorno  + =  " Titulo: "  +  isso . Titulo  +  Meio Ambiente . NewLine ;
            retorno  + =  " Descrição: "  +  isso . Descricao  +  Ambiente . NewLine ;
            retorno  + =  " Ano de Início: "  +  this . Ano  +  Meio Ambiente . NewLine ;
            retorno  + =  " Excluido: "  +  isso . Excluido ;

			return  retorno ;
		}

        public  string  retornaTitulo ()
		{
			devolva  isso . Titulo ;
		}

		public  int  retornaId ()
		{
			devolva  isso . Id ;
		}

         bool  público retornaExcluido ()
		{
			devolva  isso . Excluido ;	
		}

        public  void  Excluir () {
            isso . Excluido  =  verdadeiro ;
        }
    }
}
using  System ;
usando o  sistema . Coleções . Genérico ;
usando  DIO . Series . Interfaces ;

namespace  DIO . Series
{
	public  class  SerieRepositorio : IRepositorio < Serie >
	{
         Lista privada < Série > listaSerie  =  nova  Lista < Série > ();

		public  void  Atualiza ( int  id , Serie  objeto )
		{
			listaSerie [ id ] =  objeto ;
		}

		public  void  Exclui ( int  id )
		{
			listaSerie [ id ]. Excluir ();
		}

		public  void  Insere ( Serie  objeto )
		{
			listaSerie . Adicionar ( objeto );
		}

		 Lista pública < Série > Lista ()
		{
			return  listaSerie ;
		}

		public  int  ProximoId ()
		{
			retornar  listaSerie . Contar ;
		}

		public  Serie  RetornaPorId ( int  id )
		{
			retornar  listaSerie [ id ];
		}
	}
} 
namespace  DIO . Series
{
	 enum  público Genero
	{
		Ação  =  1 ,
		Aventura  =  2 ,
		Comedia  =  3 ,
		Documentário  =  4 ,
		Drama  =  5 ,
		Espionagem  =  6 ,
		Faroeste  =  7 ,
		Fantasia  =  8 ,
		Ficcao_Cientifica  =  9 ,
		Musical  =  10 ,
		Romance  =  11 ,
		Suspense  =  12 ,
		Terror  =  13
	}
} 
usando o  sistema . Coleções . Genérico ;

namespace  DIO . Series . Interfaces
{
     interface  pública IRepositorio < T >
    {
        Lista < T > Lista ();
        T  RetornaPorId ( int  id );        
        void  Insere ( T  entidade );        
        void  Exclui ( int  id );        
        void  Atualiza ( int  id , T  entidade );
        int  ProximoId ();
    }
} 
using  System ;

namespace  DIO . Series
{
     programa de aula
    {
         SerieRepositorio  repositorio  estático =  novo  SerieRepositorio ();
        static  void  Main ( string [] args )
        {
            string  opcaoUsuario  =  ObterOpcaoUsuario ();

			while ( opcaoUsuario . ToUpper () ! =  " X " )
			{
				switch ( opcaoUsuario )
				{
					caso  " 1 " :
						ListarSeries ();
						pausa ;
					caso  " 2 " :
						InserirSerie ();
						pausa ;
					caso  " 3 " :
						AtualizarSerie ();
						pausa ;
					caso  " 4 " :
						ExcluirSerie ();
						pausa ;
					caso  " 5 " :
						VisualizarSerie ();
						pausa ;
					caso  " C " :
						Console . Limpar ();
						pausa ;

					padrão :
						lance  novo  ArgumentOutOfRangeException ();
				}
				opcaoUsuario  =  ObterOpcaoUsuario ();
			}
			Console . WriteLine ( " Obrigado por utilizar nossos serviços. " );
			Console . ReadLine ();
        }

         string estática  privada ObterOpcaoUsuario () 
		{
			Console . WriteLine ();
			Console . WriteLine ( " Informe a opção escolha: " );

			Console . WriteLine ( " 1 - Listar séries " );
			Console . WriteLine ( " 2 - Inserir nova série " );
			Console . WriteLine ( " 3 - Atualizar série " );
			Console . WriteLine ( " 4 - Excluir série " );
			Console . WriteLine ( " 5 - Visualizar série " );
			Console . WriteLine ( " C - Limpar Tela " );
			Console . WriteLine ( " X - Sair " );
			Console . WriteLine ();

			string  opcaoUsuario  =  Console . ReadLine (). ToUpper ();
			Console . WriteLine ();

			return  opcaoUsuario ;
		}

        private  static  void  ListarSeries ()
		{
			Console . WriteLine ( " Listar séries " );

			var  lista  =  repositório . Lista ();

			if ( lista . Contagem  ==  0 )
			{
				Console . WriteLine ( " Nenhuma série cadastrada. " );
				retorno ;
			}

			foreach ( var  série  na  lista )
			{
                var  excluido  =  série . retornaExcluido ();
				Console . WriteLine ( " #ID {0}: - {1} {2} " , série . RetornaId (), série . RetornaTitulo (), ( excluido  ?  " * Excluído * "  :  " " ));
			}
		}

        privado  estático  void  InserirSerie ()
		{
			Console . WriteLine ( " Inserir nova série " );

			foreach ( int  i  in  Enum . GetValues ( typeof ( Genero )))
			{
				Console . WriteLine ( " {0} - {1} " , i , Enum . GetName ( typeof ( Genero ), i ));
			}

			Console . Write ( " Digite o gênero entre as opções acima: " );
			int  entradaGenero  =  int . Parse ( Console . ReadLine ());

			Console . Write ( " Digite o Título da Série: " );
			string  entradaTitulo  =  Console . ReadLine ();

			Console . Write ( " Digite o Ano de Início da Série: " );
			int  entradaAno  =  int . Parse ( Console . ReadLine ());

			Console . Write ( " Digite a Descrição da Série: " );
			string  entradaDescricao  =  Console . ReadLine ();

			Serie  novaSerie  =  nova  Serie ( id : repositorio . ProximoId (),
										genero : ( Genero ) entradaGenero ,
										titulo : entradaTitulo ,
										ano : entradaAno ,
										descricao : entradaDescricao );

			repositorio . Insere ( novaSerie );
		}

        private  static  void  AtualizarSerie ()
		{
			Console . Write ( " Digite o ID da série: " );
			int  indiceSerie  =  int . Parse ( Console . ReadLine ());

			foreach ( int  i  in  Enum . GetValues ( typeof ( Genero )))
			{
				Console . WriteLine ( " {0} - {1} " , i , Enum . GetName ( typeof ( Genero ), i ));
			}

			Console . Write ( " Digite o gênero entre as opções acima: " );
			int  entradaGenero  =  int . Parse ( Console . ReadLine ());

			Console . Write ( " Digite o Título da Série: " );
			string  entradaTitulo  =  Console . ReadLine ();

			Console . Write ( " Digite o Ano de Início da Série: " );
			int  entradaAno  =  int . Parse ( Console . ReadLine ());

			Console . Write ( " Digite a Descrição da Série: " );
			string  entradaDescricao  =  Console . ReadLine ();

			Serie  atualizaSerie  =  nova  Serie ( id : indiceSerie ,
										genero : ( Genero ) entradaGenero ,
										titulo : entradaTitulo ,
										ano : entradaAno ,
										descricao : entradaDescricao );

			repositorio . Atualiza ( indiceSerie , atualizaSerie );
		}

        private  static  void  ExcluirSerie ()
		{
			Console . Write ( " Digite o ID da série: " );
			int  indiceSerie  =  int . Parse ( Console . ReadLine ());

			repositorio . Exclui ( indiceSerie );
		}

        private  static  void  VisualizarSerie ()
		{
			Console . Write ( " Digite o ID da série: " );
			int  indiceSerie  =  int . Parse ( Console . ReadLine ());

			var  serie  =  repositorio . RetornaPorId ( indiceSerie );
			Console . WriteLine ( série );
		}
    }
} 
